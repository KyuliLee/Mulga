import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer tokens = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(tokens.nextToken());
		int L = Integer.parseInt(tokens.nextToken());
		int R = Integer.parseInt(tokens.nextToken());
		int[][] map = new int[N][N];
		boolean[][] check = new boolean[N][N];
		for (int i = 0; i < N; i++) {
			tokens = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(tokens.nextToken());
			}
		}
		
		int output = 0;
		int cnt = 0;
		Queue<int[]> q;
		Queue<int[]> tmp = new LinkedList<>();
		while (cnt != N * N) {
			check = new boolean[N][N];
			cnt = 0;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (check[i][j] == true) continue;
					q = new LinkedList<>();
					tmp.offer(new int[] {i, j});
					check[i][j] = true;
					while (!tmp.isEmpty()) {
						int size = tmp.size();
						for (int k = 0; k < size; k++) {
							int[] now = tmp.poll();
							if (now[0] - 1 >= 0 && check[now[0] - 1][now[1]] == false
									&& Math.abs(map[now[0]][now[1]] - map[now[0] - 1][now[1]]) >= L
									&& Math.abs(map[now[0]][now[1]] - map[now[0] - 1][now[1]]) <= R) {
								tmp.offer(new int[] {now[0] - 1, now[1]});
								check[now[0] - 1][now[1]] = true;
							}
							if (now[0] + 1 < N && check[now[0] + 1][now[1]] == false
									&& Math.abs(map[now[0]][now[1]] - map[now[0] + 1][now[1]]) >= L
									&& Math.abs(map[now[0]][now[1]] - map[now[0] + 1][now[1]]) <= R) {
								tmp.offer(new int[] {now[0] + 1, now[1]});
								check[now[0] + 1][now[1]] = true;
							}
							if (now[1] - 1 >= 0 && check[now[0]][now[1] - 1] == false
									&& Math.abs(map[now[0]][now[1]] - map[now[0]][now[1] - 1]) >= L
									&& Math.abs(map[now[0]][now[1]] - map[now[0]][now[1] - 1]) <= R) {
								tmp.offer(new int[] {now[0], now[1] - 1});
								check[now[0]][now[1] - 1] = true;
							}
							if (now[1] + 1 < N && check[now[0]][now[1] + 1] == false
									&& Math.abs(map[now[0]][now[1]] - map[now[0]][now[1] + 1]) >= L
									&& Math.abs(map[now[0]][now[1]] - map[now[0]][now[1] + 1]) <= R) {
								tmp.offer(new int[] {now[0], now[1] + 1});
								check[now[0]][now[1] + 1] = true;
							}
							q.offer(now);
						}
					}
					cnt++;
					int sum = 0;
					for (int[] cue : q) {
						sum += map[cue[0]][cue[1]];
					}
					sum /= q.size();
					for (int[] cue : q) {
						map[cue[0]][cue[1]] = sum;
					}
				}
			}
			output++;
		}
		System.out.println(output - 1);
	}
}